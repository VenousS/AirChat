const { spawn } = require('child_process');
const path = require('path');

document.addEventListener('DOMContentLoaded', () => {
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const elements = {
        loginContainer: document.getElementById('login-container'),
        chatContainer: document.getElementById('chat-container'),
        connectButton: document.getElementById('connectButton'),
        createRoomBtn: document.getElementById('createRoomBtn'),
        messageInput: document.getElementById('message-input'),
        sendBtn: document.getElementById('sendBtn'),
        voiceChatBtn: document.getElementById('voiceChatBtn'),
        exitChatBtn: document.getElementById('exitChatBtn'),
        messageArea: document.getElementById('message-area'),
        usernameInput: document.getElementById('username'),
        ipInput: document.getElementById('server-ip')
    };

    let currentUser = '';
    let isVoiceChatActive = false;
    let clientProcess = null;
    let serverProcess = null;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const init = () => {
        elements.loginContainer.style.display = 'block';
        elements.chatContainer.style.display = 'none';
        elements.messageArea.innerHTML = '';
        elements.usernameInput.value = '';
        elements.ipInput.value = '127.0.0.1'; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ IP
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        if (clientProcess) {
            clientProcess.kill();
            clientProcess = null;
        }
        if (serverProcess) {
            serverProcess.kill();
            serverProcess = null;
        }
    };

    init();

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å–∞–º
    const getAppPath = () => {
        return process.env.NODE_ENV === 'development' 
            ? path.join(__dirname, '..') 
            : path.join(process.resourcesPath, 'app');
    };

    // –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É (–∑–∞–ø—É—Å—Ç–∏—Ç—å server.exe)
    elements.createRoomBtn.addEventListener('click', () => {
        const appPath = getAppPath();
        const serverPath = path.join(appPath, 'bin', 'server.exe');
        
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω
        if (serverProcess) {
            addSystemMessage('–°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        serverProcess = spawn(serverPath, [], {
            cwd: path.join(appPath, 'bin'),
            shell: true
        });

        serverProcess.stdout.on('data', (data) => {
            console.log('Server:', data.toString());
            addSystemMessage(`–°–µ—Ä–≤–µ—Ä: ${data.toString().trim()}`);
        });

        serverProcess.stderr.on('data', (data) => {
            console.error('Server Error:', data.toString());
            addSystemMessage(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${data.toString().trim()}`);
        });

        serverProcess.on('exit', (code) => {
            console.log(`Server exited with code ${code}`);
            addSystemMessage(`–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É (–∫–æ–¥ ${code})`);
            serverProcess = null;
        });

        addSystemMessage('–°–µ—Ä–≤–µ—Ä —á–∞—Ç–∞ –∑–∞–ø—É—â–µ–Ω');
    });

    // –í–æ–π—Ç–∏ –≤ —á–∞—Ç (–∑–∞–ø—É—Å—Ç–∏—Ç—å client.exe)
    elements.connectButton.addEventListener('click', () => {
        const username = elements.usernameInput.value.trim();
        const serverIP = elements.ipInput.value.trim() || '127.0.0.1';

        if (!username) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }

        currentUser = username;
        elements.loginContainer.style.display = 'none';
        elements.chatContainer.style.display = 'block';
        addSystemMessage(`–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ ${username}, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${serverIP}`);

        const appPath = getAppPath();
        const clientPath = path.join(appPath, 'bin', 'client.exe');
        
        clientProcess = spawn(clientPath, [serverIP, username], {
            cwd: path.join(appPath, 'bin'),
            shell: true
        });

        clientProcess.stdout.on('data', (data) => {
            const message = data.toString().trim();
            if (message.includes('joined the chat')) {
                addSystemMessage(message);
            } else {
                addMessage(message.split(':')[0], message.split(':')[1].trim(), 'other');
            }
        });

        clientProcess.stderr.on('data', (data) => {
            addSystemMessage(`–û—à–∏–±–∫–∞: ${data.toString().trim()}`);
        });

        clientProcess.on('close', (code) => {
            addSystemMessage(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ (–∫–æ–¥ ${code})`);
            clientProcess = null;
        });
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    const sendMessage = () => {
        const message = elements.messageInput.value.trim();
        if (message && clientProcess) {
            clientProcess.stdin.write(message + '\n');
            addMessage(currentUser, message, 'user');
            elements.messageInput.value = '';
        }
    };

    elements.sendBtn.addEventListener('click', sendMessage);
    elements.messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendMessage();
    });

    // –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç (–∑–∞–≥–ª—É—à–∫–∞)
    elements.voiceChatBtn.addEventListener('click', () => {
        isVoiceChatActive = !isVoiceChatActive;
        if (isVoiceChatActive) {
            elements.voiceChatBtn.innerHTML = 'üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç';
            elements.voiceChatBtn.style.backgroundColor = '#ff5252';
            addSystemMessage('–ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
        } else {
            elements.voiceChatBtn.innerHTML = 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç';
            elements.voiceChatBtn.style.backgroundColor = '';
            addSystemMessage('–ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        }
    });

    // –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞
    elements.exitChatBtn.addEventListener('click', init);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç
    function addMessage(user, text, type) {
        const messageElement = document.createElement('div');
        messageElement.className = `message ${type}`;
        messageElement.innerHTML = `
            <div class="message-info">${user} ‚Ä¢ ${new Date().toLocaleTimeString()}</div>
            <div class="message-text">${text}</div>
        `;
        elements.messageArea.appendChild(messageElement);
        elements.messageArea.scrollTop = elements.messageArea.scrollHeight;
    }

    function addSystemMessage(text) {
        addMessage('–°–∏—Å—Ç–µ–º–∞', text, 'system');
    }
});