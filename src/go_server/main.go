package main

import (
	"log"
	"net"
	"os"
	"os/signal"
	"strings"
	"sync"
	"syscall"
	"time"
)

type Client struct {
	addr      net.Addr
	username  string
	inVoice   bool
	voiceAddr string // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
}

var (
	clients    = make(map[string]*Client)
	clientsMux sync.RWMutex
)

func cleanup(pc, voiceConn net.PacketConn) {
	log.Println("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
	clientsMux.RLock()
	for _, client := range clients {
		pc.WriteTo([]byte("–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É"), client.addr)
	}
	clientsMux.RUnlock()

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	if pc != nil {
		pc.Close()
	}
	if voiceConn != nil {
		voiceConn.Close()
	}
}

func handleVoiceData(voiceConn net.PacketConn) {
	buffer := make([]byte, 4096)
	var lastLogTime time.Time
	var bytesProcessed int
	var packetsProcessed int
	var lastClientListTime time.Time

	log.Println("–ó–∞–ø—É—â–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

	for {
		n, remoteAddr, err := voiceConn.ReadFrom(buffer)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
			continue
		}

		senderIP := strings.Split(remoteAddr.String(), ":")[0]
		bytesProcessed += n
		packetsProcessed++

		// –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
		if time.Since(lastLogTime) > 5*time.Second {
			log.Printf("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ %d –ø–∞–∫–µ—Ç–æ–≤, %d –±–∞–π—Ç (%.2f –ö–ë/—Å)",
				packetsProcessed, bytesProcessed, float64(bytesProcessed)/5.0/1024.0)
			lastLogTime = time.Now()
			bytesProcessed = 0
			packetsProcessed = 0
		}

		// –ò—â–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ voiceAddr, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–æ IP
		var sender *Client
		var exists bool

		clientsMux.Lock() // LOCK –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!
		for _, client := range clients {
			if client.voiceAddr == remoteAddr.String() {
				sender = client
				exists = true
				break
			}
		}
		// –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ voiceAddr ‚Äî –∏—â–µ–º –ø–æ IP –∏ inVoice
		if !exists {
			for _, client := range clients {
				if client.inVoice && strings.Split(client.addr.String(), ":")[0] == senderIP {
					log.Printf("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ voiceAddr –¥–ª—è %s: %s -> %s", client.username, client.voiceAddr, remoteAddr.String())
					client.voiceAddr = remoteAddr.String()
					sender = client
					exists = true
					break
				}
			}
		}

		if !exists || !sender.inVoice {
			clientsMux.Unlock()
			// –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥
			if time.Since(lastClientListTime) > 10*time.Second {
				log.Printf("‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: %s (IP: %s)", remoteAddr.String(), senderIP)
				log.Println("–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:")
				for _, c := range clients {
					status := "üîá"
					if c.inVoice {
						status = "üîä"
					}
					log.Printf("%s %s (%s) -> %s", status, c.username,
						strings.Split(c.addr.String(), ":")[0], c.voiceAddr)
				}
				lastClientListTime = time.Now()
			}
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ
		recipientCount := 0
		for _, client := range clients {
			if client.inVoice && client.voiceAddr != remoteAddr.String() {
				voiceAddr, err := net.ResolveUDPAddr("udp", client.voiceAddr)
				if err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–¥—Ä–µ—Å–∞ %s: %v", client.username, err)
					continue
				}
				_, err = voiceConn.WriteTo(buffer[:n], voiceAddr)
				if err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ %s: %v", client.username, err)
				} else {
					recipientCount++
				}
			}
		}

		// –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
		if recipientCount > 0 && time.Since(lastLogTime) > 5*time.Second {
			log.Printf("‚úÖ %s -> %d –∫–ª–∏–µ–Ω—Ç–∞–º (%d –±–∞–π—Ç)", sender.username, recipientCount, n)
		}

		clientsMux.Unlock()
	}
}

func main() {
	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	pc, err := net.ListenPacket("udp", ":6000")
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err)
	}

	voiceConn, err := net.ListenPacket("udp", ":6001")
	if err != nil {
		pc.Close()
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:", err)
	}

	// –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
	defer cleanup(pc, voiceConn)

	log.Println("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É :6000")
	log.Println("–ì–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É :6001")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go handleVoiceData(voiceConn)

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	go func() {
		<-sigChan
		cleanup(pc, voiceConn)
		os.Exit(0)
	}()

	for {
		buffer := make([]byte, 4096)
		n, addr, err := pc.ReadFrom(buffer)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v", err)
			continue
		}

		msg := string(buffer[:n])
		clientKey := addr.String()

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
		if strings.Contains(msg, " joined the chat") {
			username := strings.Split(msg, " joined the chat")[0]
			clientIP := strings.Split(clientKey, ":")[0]

			clientsMux.Lock()
			clients[clientKey] = &Client{
				addr:      addr,
				username:  username,
				inVoice:   false,
				voiceAddr: clientIP + ":6001",
			}
			clientsMux.Unlock()
			log.Printf("‚ú® –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: %s (%s) -> %s", username, clientIP, clientIP+":6001")

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
			clientsMux.RLock()
			for _, client := range clients {
				if client.addr.String() != clientKey {
					pc.WriteTo([]byte(msg), client.addr)
				}
			}
			clientsMux.RUnlock()
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
		if msg == "VOICE_CONNECT" {
			clientsMux.Lock()
			if client, ok := clients[clientKey]; ok {
				client.inVoice = true
				notification := client.username + " –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É"
				log.Printf("üé§ %s (%s) –≤–æ—à—ë–ª –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç",
					client.username, strings.Split(clientKey, ":")[0])

				// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É
				for _, c := range clients {
					pc.WriteTo([]byte(notification), c.addr)
				}
			} else {
				log.Printf("‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ: %s", clientKey)
			}
			clientsMux.Unlock()
			continue
		}

		if msg == "VOICE_DISCONNECT" {
			clientsMux.Lock()
			if client, ok := clients[clientKey]; ok {
				client.inVoice = false
				notification := client.username + " –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞"
				log.Printf("üîá %s (%s) –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞",
					client.username, strings.Split(clientKey, ":")[0])

				// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞
				for _, c := range clients {
					pc.WriteTo([]byte(notification), c.addr)
				}
			}
			clientsMux.Unlock()
			continue
		}

		// –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
		log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", clientKey, msg)
		clientsMux.RLock()
		for _, client := range clients {
			if client.addr.String() != clientKey {
				pc.WriteTo([]byte(msg), client.addr)
			}
		}
		clientsMux.RUnlock()
	}
}
